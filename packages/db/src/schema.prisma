// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL_ACCELERATE")
  directUrl = env("POSTGRES_PRISMA_URL")
}

// use mysql
model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String       @id @default(uuid())
  name          String?
  password      String
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  Assessment    Assessment[]
  Patient       Patient[]
}

model AssessmentType {
  id                String              @id @default(uuid())
  name              String              @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ApplicableMeasure ApplicableMeasure[]
}

model ApplicableMeasure {
  id               String         @id @default(uuid())
  name             String
  assessmentTypeId String
  assessmentType   AssessmentType @relation(fields: [assessmentTypeId], references: [id], onDelete: Cascade)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  Assessment       Assessment[]
  Question         Question[]

  @@unique([name, assessmentTypeId])
}

model Assessment {
  id                  String             @id @default(uuid())
  applicableMeasureId String
  applicableMeasure   ApplicableMeasure  @relation(fields: [applicableMeasureId], references: [id], onDelete: Cascade)
  patientId           String
  patient             Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  uid                 String
  user                User               @relation(fields: [uid], references: [id], onDelete: Cascade)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  AssessmentAnswer    AssessmentAnswer[]
}

model Patient {
  id   String @id @default(uuid())
  name String
  uid  String
  user User   @relation(fields: [uid], references: [id], onDelete: Cascade)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Assessment Assessment[]
}

model Question {
  id                  String            @id @default(uuid())
  title               String
  description         String?           @db.Text
  applicableMeasureId String
  applicableMeasure   ApplicableMeasure @relation(fields: [applicableMeasureId], references: [id], onDelete: Cascade)
  questionType        QuestionType
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  QuestionOption   QuestionOption[]
  AssessmentAnswer AssessmentAnswer[]
}

model QuestionOption {
  id               String             @id @default(uuid())
  title            String
  questionId       String
  question         Question           @relation(fields: [questionId], references: [id], onDelete: Cascade)
  pictureURL       String?            @db.Text
  isCorrect        Boolean
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  AssessmentAnswer AssessmentAnswer[]
}

model AssessmentAnswer {
  id           String         @id @default(uuid())
  assessmentId String
  assessment   Assessment     @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  questionId   String
  question     Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  optionId     String
  option       QuestionOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum QuestionType {
  SINGLE_SELECT
  MULTI_SELECT
  READ_ONLY
  SWITCH
}
